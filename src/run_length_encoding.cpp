#include "run_length_encoding.h"
#include "clock.h"
#include "defines.h"
#include <opencv2/opencv.hpp>
#include <smmintrin.h>
#include <stdint.h>
#include <vector>

// https://stackoverflow.com/questions/3849337/msvc-equivalent-to-builtin-popcount
#ifdef _MSC_VER
#include <intrin.h>
#define __builtin_popcount __popcnt
#endif

namespace {

static const char mask128_epi8[256][16] = {
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x2, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3,
    0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6,
    0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x4, 0x5, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2,
    0x3, 0x4, 0x5, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x2, 0x3, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x8, 0x9, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x8,
    0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0x8,
    0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7,
    0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2,
    0x3, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5,
    0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0xa, 0xb, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0xa, 0xb, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5,
    0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0xa, 0xb, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7,
    0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6,
    0x7, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x2, 0x3, 0x6, 0x7, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4,
    0x5, 0x6, 0x7, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xa, 0xb, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x8, 0x9, 0xa,
    0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9,
    0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4,
    0x5, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0x8, 0x9,
    0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6,
    0x7, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3,
    0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb,
    0x0, 0x0, 0x0, 0x0, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0xc, 0xd, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0xc, 0xd, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0xc, 0xd,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0xc,
    0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3,
    0x4, 0x5, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0xc,
    0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x6, 0x7, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2,
    0x3, 0x6, 0x7, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x4, 0x5, 0x6, 0x7, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xc, 0xd, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xc,
    0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x8, 0x9, 0xc, 0xd,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x8,
    0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5,
    0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2,
    0x3, 0x4, 0x5, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7,
    0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
    0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0xa, 0xb, 0xc, 0xd, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0xa, 0xb,
    0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0xa, 0xb, 0xc,
    0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5,
    0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4,
    0x5, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x2, 0x3, 0x4, 0x5, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6,
    0x7, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x2, 0x3, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xa,
    0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x9, 0xa, 0xb, 0xc,
    0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x8, 0x9, 0xa, 0xb,
    0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x8,
    0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x8, 0x9,
    0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4,
    0x5, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3,
    0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0,
    0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd,
    0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb,
    0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa,
    0xb, 0xc, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
    0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0x0, 0x0, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xe, 0xf, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0xe,
    0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x4, 0x5, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2,
    0x3, 0x4, 0x5, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x6, 0x7, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6,
    0x7, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8, 0x9, 0xe,
    0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x8, 0x9,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2,
    0x3, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5,
    0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x4, 0x5, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x6, 0x7, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,
    0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5,
    0x6, 0x7, 0x8, 0x9, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0xa, 0xb, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xa, 0xb,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0xa,
    0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x2, 0x3, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4,
    0x5, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x4, 0x5, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x2, 0x3, 0x4, 0x5, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x6, 0x7, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0xa, 0xb, 0xe,
    0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7, 0xa,
    0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
    0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4,
    0x5, 0x6, 0x7, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9, 0xa, 0xb,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x8,
    0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3,
    0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x2, 0x3, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xe,
    0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9,
    0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa,
    0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6, 0x7,
    0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x6,
    0x7, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3,
    0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xe, 0xf, 0x0, 0x0, 0xc, 0xd, 0xe,
    0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2,
    0x3, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0x2, 0x3, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x4, 0x5, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0xc, 0xd, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0xc, 0xd, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0xc, 0xd, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7, 0xc,
    0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0xc, 0xd,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x6,
    0x7, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5,
    0x6, 0x7, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2,
    0x3, 0x4, 0x5, 0x6, 0x7, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x8, 0x9,
    0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x2, 0x3, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x4, 0x5, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xc, 0xd,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0x8, 0x9, 0xc,
    0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6, 0x7,
    0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7, 0x8,
    0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5,
    0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4,
    0x5, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0xa,
    0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x1, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x2, 0x3, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x4, 0x5, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0xa, 0xb, 0xc,
    0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0xa, 0xb, 0xc,
    0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0xa, 0xb,
    0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x6,
    0x7, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x6, 0x7,
    0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4,
    0x5, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3,
    0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0,
    0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x1, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x2, 0x3, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf,
    0x0, 0x0, 0x0, 0x0, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0,
    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd,
    0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9, 0xa, 0xb, 0xc,
    0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x8, 0x9,
    0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc,
    0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x6, 0x7, 0x8, 0x9,
    0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x6, 0x7, 0x8,
    0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3,
    0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x4, 0x5, 0x6,
    0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
    0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0, 0x2,
    0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x0, 0x0,
    0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe,
    0xf,
};

void printm128i_i8(__m128i m) {
  for (int i = 0; i < 16; i++) {
    std::cout << static_cast<int>(m.m128i_i8[i]) << ' ';
  }
  std::cout << std::endl;
}

void printm128i_i16(__m128i m) {
  for (int i = 0; i < 8; i++) {
    std::cout << static_cast<int>(m.m128i_i16[i]) << ' ';
  }
  std::cout << std::endl;
}

#define PRT_16(a)                                                              \
  do {                                                                         \
    std::cout << #a << ":" << std::endl;                                       \
    printm128i_i16(a);                                                         \
  } while (0);

#define PRT_8(a)                                                               \
  do {                                                                         \
    std::cout << #a << ":" << std::endl;                                       \
    printm128i_i8((a));                                                        \
  } while (0);

int16_t *_mm_compress_storeu_m16_epi16(int16_t *p, __m128i v, __m128i m) {

  m = _mm_packs_epi16(m, _mm_setzero_si128());

  int mi = _mm_movemask_epi8(m);

  // __m128i perm = _mm_load_si128((__m128i *)mask128_epi8[mi]);
  __m128i perm = _mm_load_si128((__m128i *)mask128_epi8[mi]);

  v = _mm_shuffle_epi8(v, perm);

  _mm_storeu_si128((__m128i *)p, v);

  return p + __builtin_popcount(mi);
}

int16_t *threshold_line_simd(const int w, uint8_t *X, int16_t *RLC, int16_t low,
                             int16_t high) {
  __m128i last = _mm_setzero_si128();
  __m128i incr8 = _mm_set1_epi16(8);
  __m128i J = _mm_set_epi16(7, 6, 5, 4, 3, 2, 1, 0);
  for (int i = 0; i < w; i += 8) {
    __m128i in = _mm_loadl_epi64((__m128i *)(X + i));
    in = _mm_cvtepu8_epi16(in);

    in = _mm_and_si128(_mm_cmpgt_epi16(in, _mm_set1_epi16(low)),
                       _mm_cmplt_epi16(in, _mm_set1_epi16(high)));

    if (i + 8 > w) {
      for (int j = 0; j < i + 8 - w; j++) {
        in.m128i_i16[7 - j] = 0;
      }
    }
    // edge detection
    __m128i prev = _mm_alignr_epi8(in, last, 14);
    __m128i f = _mm_cmpeq_epi16(in, prev);
    f = _mm_xor_si128(f, _mm_set_epi8(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                      -1, -1, -1, -1, -1, -1));

    last = in;
    // compress and store indices
    RLC = _mm_compress_storeu_m16_epi16(RLC, J, f);
    J = _mm_add_epi16(J, incr8);
  }

  if (w % 8 == 0 && X[w - 1] != 0) {
    *RLC++ = w;
  }
  return RLC;
}

void threshold_encode_simd(const cv::Mat image, Region &region,
                           const uint8_t lo, const uint8_t hi) {
  auto height = image.size().height;
  auto width = image.size().width;
  region.image_height = height;
  region.image_width = width;
  auto rlc = region.run_x_pairs;
  region.run_count = 0;
  auto last_rlc = rlc;
  for (int i = 0; i < height; i++) {
    rlc = threshold_line_simd(width, image.data + i * width, rlc, lo, hi);
    auto len = static_cast<int>(rlc - region.run_x_pairs) / 2;
    for (int j = region.run_count; j < len; j++) {
      region.run_y[j] = i;
    }
    region.run_count = len;
  }
}

void encode_inner(const cv::Mat &image, Region &region, int start_row,
                  int end_row) {
  auto run_x_pairs = region.run_x_pairs;
  auto run_y = region.run_y;
  for (int i = start_row; i < end_row; i++) {
    const uchar *first = image.ptr<uchar>(i);
    int j = 0;
    int blob_start;
    do {
      while (j < image.cols && (first[j] != 0)) {
        ++j;
      }
      if (j == image.cols) // ÅÐ¶ÏÊÇ·ñÔ½½ç
        break;
      blob_start = j;
      while (j < image.cols && (first[j] != 0)) {
        ++j;
      }
      {
        run_x_pairs[0] = blob_start;
        *run_y++ = i;
        run_x_pairs[1] = j - 1;
        run_x_pairs += 2;
      }
    } while (image.cols != j);
  }
  region.run_count = int(run_y - region.run_y);
}

void threshold2(const cv::Mat &image, Region &region, int start_row,
                int end_row, double MinGray, double MaxGray) {
  region.image_width = image.cols;
  region.image_height = image.rows;
  auto run_x_pairs = region.run_x_pairs;
  auto run_y = region.run_y;
  auto run_count = 0;
  for (int i = start_row; i < end_row; i++) {
    const uchar *first = image.ptr<uchar>(i);
    int j = 0;
    int blob_start;
    do {
      while (j < image.cols && (first[j] < MinGray || first[j] > MaxGray)) {
        ++j;
      }
      if (j == image.cols) // ÅÐ¶ÏÊÇ·ñÔ½½ç
        break;
      blob_start = j;
      run_count++;
      while (j < image.cols && (first[j] >= MinGray && first[j] <= MaxGray)) {
        ++j;
      }
      {
        run_x_pairs[0] = blob_start;
        *run_y++ = i;
        run_x_pairs[1] = j - 1;
        run_x_pairs += 2;
      }
    } while (image.cols != j);
  }
  region.run_count = run_count;
}

void threshold(const cv::Mat &image, Region &dst, double lo, double hi) {
  int iRows = image.rows;
  int iCols = image.cols;
  assert(Image.type() == CV_8UC1);

  auto run_x_pairs = dst.run_x_pairs;
  auto run_y = dst.run_y;
  /* auto rle_x_end = dst.rle_x_end; */

  dst.image_width = image.cols;
  dst.image_height = image.rows;

  Region region1, region2, region3, region4;

  {
    Clock clk("par");
#pragma omp parallel sections
    {
#pragma omp section
      threshold2(image, region1, 0, iRows / 4, lo, hi);
#pragma omp section
      threshold2(image, region2, iRows / 4, iRows / 2, lo, hi);
#pragma omp section
      threshold2(image, region3, iRows / 2, iRows * 3 / 4, lo, hi);
#pragma omp section
      threshold2(image, region4, iRows * 3 / 4, iRows, lo, hi);
    }
  }
  {
    Clock clk("connect");
    for (int i = 0; i < region1.run_count; i++) {
      run_x_pairs[0] = region1.run_x_pairs[i * 2];
      run_x_pairs[1] = region1.run_x_pairs[i * 2 + 1];
      run_x_pairs += 2;
      *run_y++ = region1.run_y[i];
    }
    dst.run_count = region1.run_count;
    for (int i = 0; i < region2.run_count; i++) {
      run_x_pairs[0] = region2.run_x_pairs[i * 2];
      run_x_pairs[1] = region2.run_x_pairs[i * 2 + 1];
      run_x_pairs += 2;
      *run_y++ = region2.run_y[i];
    }
    dst.run_count += region2.run_count;
    for (int i = 0; i < region3.run_count; i++) {
      run_x_pairs[0] = region3.run_x_pairs[i * 2];
      run_x_pairs[1] = region3.run_x_pairs[i * 2 + 1];
      run_x_pairs += 2;
      *run_y++ = region3.run_y[i];
    }
    dst.run_count += region3.run_count;
    for (int i = 0; i < region4.run_count; i++) {
      run_x_pairs[0] = region4.run_x_pairs[i * 2];
      run_x_pairs[1] = region4.run_x_pairs[i * 2 + 1];
      run_x_pairs += 2;
      *run_y++ = region4.run_y[i];
    }
    dst.run_count += region4.run_count;
  }
}

void decode_binary(const Region &region, cv::Mat &image) {
  image = cv::Mat::zeros(region.image_height, region.image_width, CV_8UC1);
  for (int i = 0; i < region.run_count; i++) {
    for (int j = region.run_x_pairs[2 * i]; j <= region.run_x_pairs[2 * i + 1];
         j++) {
      image.at<uchar>(region.run_y[i], j) = 255;
    }
  }
}

std::vector<cv::Point3_<uchar>> generateDistinguishableColors(int numColors) {
  std::vector<cv::Point3_<uchar>> colors;
  srand(time(0));
  for (int i = 0; i < numColors; i++) {
    int r = rand() % 256;
    int g = rand() % 256;
    int b = rand() % 256;
    colors.push_back(cv::Point3_<uchar>(r, g, b));
  }
  return colors;
}

void decode_label(const Region &region, cv::Mat &image) {
  auto colors = generateDistinguishableColors(region.num_labels);
  image = cv::Mat::zeros(region.image_height, region.image_width, CV_8UC3);
  for (int i = 0; i < region.run_count; i++) {
    for (int j = region.run_x_pairs[2 * i]; j <= region.run_x_pairs[2 * i + 1];
         j++) {
      image.at<cv::Point3_<uchar>>(region.run_y[i], j) =
          colors[region.run_labels[i]];
    }
  }
}

const static size_t MaxRunCount = 300000;

} // namespace

Region::Region() {
  m_ref_count = static_cast<uint64_t *>(malloc(sizeof(uint64_t)));
  *m_ref_count = 1;

  run_x_pairs =
      static_cast<int16_t *>(malloc(sizeof(int16_t) * 2 * MaxRunCount));
  run_y = static_cast<int16_t *>(malloc(sizeof(int16_t) * MaxRunCount));
}

Region::Region(const Region &other) {
  m_ref_count = other.m_ref_count;
  (*m_ref_count)++;

  run_x_pairs = other.run_x_pairs;
  run_y = other.run_y;
  run_count = other.run_count;
  run_labels = other.run_labels;
  image_height = other.image_height;
  image_width = other.image_width;
}

Region &Region::operator=(const Region &other) {
  if (this == &other) {
    return *this;
  }

  (*m_ref_count)--;
  if (*m_ref_count == 0) {
    free(run_x_pairs);
    free(run_y);
  }

  m_ref_count = other.m_ref_count;
  (*m_ref_count)++;

  run_x_pairs = other.run_x_pairs;
  run_y = other.run_y;
  run_count = other.run_count;
  run_labels = other.run_labels;
  image_height = other.image_height;
  image_width = other.image_width;

  return *this;
}

Region::~Region() {
  (*m_ref_count)--;
  if (*m_ref_count == 0) {
    free(run_x_pairs);
    free(run_y);
    free(m_ref_count);
  }
}

void ThresholdAndEncode(const cv::Mat image, Region &encoded_region,
                        const uint8_t lo, const uint8_t hi) {
  /* threshold(image, encoded_region, lo, hi); */

  // TODO(hyt): use simd
  threshold_encode_simd(image, encoded_region, lo, hi);
}

void Encode(const cv::Mat image, Region &dst) {
  encode_inner(image, dst, 0, image.rows);
}

void Decode(const Region &region, cv::Mat &dst) { decode_binary(region, dst); }
